<?php

namespace MayMeow\Tests\Features;

use MayMeow\Tests\TestCase;
use MayMeow\Factory\CertificateFactory;
use MayMeow\Model\EncryptConfiguration;

class SigningCertificatesTest extends TestCase 
{
    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->certificateFactory = new CertificateFactory(new EncryptConfiguration());
    }

    /** @test */
    function user_can_create_CA_certificate()
    {
        $this->certificateFactory->domainName()
            ->setOrganizationName('Test CA')
            ->setCountryName('SK')
            ->setCommonName('Test Root CA');

        $this->certificateFactory->setType('ca')
            ->setName('test-ca')
            ->sign()->toFile();

        $this->assertTrue(file_exists(WWW_ROOT . 'test-ca' . DS . 'cert.crt'));
    }

    /** @test */
    function user_can_sign_intermediate_CA_certificate()
    {
        $this->certificateFactory->domainName()
            ->setOrganizationName('Test CA')
            ->setCountryName('SK')
            ->setOrganizationalUnitName('Intermediate Certificate authority')
            ->setCommonName('Test Intermediate CA');

        $this->certificateFactory->setType('intermediate')
            ->setName('test-intermediate-ca')
            ->setCa('test-ca', file_get_contents(WWW_ROOT . 'test-ca' . DS . 'code.txt'))
            ->sign()->toFile();

        $this->assertTrue(file_exists(WWW_ROOT . 'test-intermediate-ca' . DS . 'cert.crt'));
    }

    /** @test */
    function user_can_create_user_certificate()
    {
        $this->certificateFactory->domainName()
            ->setOrganizationName('Test Organization')
            ->setCountryName('SK')
            ->setOrganizationalUnitName('Test Organization Unit')
            ->setCommonName('Jane Doe');

        $this->certificateFactory->setType('user')
            ->setName('test-user_certificate')
            ->setCa('test-intermediate-ca', file_get_contents(WWW_ROOT . 'test-intermediate-ca' . DS . 'code.txt'))
            ->sign()->toFile();

        $this->assertTrue(file_exists(WWW_ROOT . 'test-user_certificate' . DS . 'cert.crt'));
    }

    /** @test */
    function user_can_create_server_certificate()
    {
        $this->certificateFactory->domainName()
            ->setOrganizationName('Test Organization')
            ->setCountryName('SK')
            ->setOrganizationalUnitName('Test Organization Unit')
            ->setCommonName('webserver.dev');

        $this->certificateFactory->getAltNames()
            ->setDns("webserver.dev")
            ->setDns("*.webserver.dev")
            ->setIp("10.0.0.1");

        $this->certificateFactory->setType('server')
            ->setName('test-server-certificate')
            ->setCa('test-intermediate-ca', file_get_contents(WWW_ROOT . 'test-intermediate-ca' . DS . 'code.txt'))
            ->sign()->toFile();

        $this->assertTrue(file_exists(WWW_ROOT . 'test-user_certificate' . DS . 'cert.crt'));
    }
}