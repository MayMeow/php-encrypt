<?php
namespace MayMeow\Tests\RSA;

use MayMeow\Cryptography\RSA\RSAParametersInterface;
use MayMeow\RSA\RSACryptoServiceProvider;
use MayMeow\Tests\TestCase;

class RSACryptoServiceProviderTest extends TestCase
{
    /**
     * @var RSACryptoServiceProvider
     */
    protected $csp;

    static $passphrase = 'pa$$phrase';

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->csp = new RSACryptoServiceProvider();
    }

    /** @test */
    public function get_key_pair()
    {
        $keypair = $this->csp->generateKeyPair(static::$passphrase);

        $this->assertInstanceOf(RSAParametersInterface::class, $keypair);
    }

    /**
     * @test
     */
    public function encrypting_with_protected_key()
    {
        $this->csp->generateKeyPair(static::$passphrase);

        $plainText = 'Hello World!';
        $encryptedText = $this->csp->encrypt($plainText);

        $this->assertEquals($plainText, $this->csp->decrypt($encryptedText));
    }

    /**
     * @test
     */
    public function encrypting_without_protected_key()
    {
        $this->csp->generateKeyPair();

        $plainText = 'Hello World!';
        $encryptedText = $this->csp->encrypt($plainText);

        $this->assertEquals($plainText, $this->csp->decrypt($encryptedText));
    }

    public function signing()
    {
        $this->csp->generateKeyPair(static::$passphrase);

        $plainText = 'Text so sign';

        $signature = $this->csp->sign($plainText);

        $this->assertTrue($this->csp->verify($plainText, $signature));
        $this->assertFalse($this->csp->verify($plainText . 'add to text', $signature));
    }
}